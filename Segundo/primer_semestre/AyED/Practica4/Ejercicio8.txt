1- int c = 1;
   while(c < n){
    algo_de_O(1);
    c = 2 * c;
   }
Paso 1: c = 2
Paso 2: c = 4
Paso 3: c = 8
Paso i: c = 2^i
corta cuando:
2^i >= n
log_2(2^i) >= log_2(n)
i >= log_2(n)
T(n) = cte + log_2(n)*cte1

2- int c = n;
   while(c < 1){
    algo_de_O(1);
    c = c / 2;
   }
Paso 1: c = n/2
Paso 2: c = n/4
Paso 3: c = n/8
Paso i: c = n/2^i
corta cuando:
n/2^i >= 1
n = 2^i
log_2(n) = i
T(n) = cte + log_2(n)*cte1

3- 
   public static void calcular(int n) {
    int i, j, r = 0;
    for (i = 1; i < n; i= i+2)
     for (j = 1; j <= i; j++)
      r = r + 1;
    return r;
    }
   }
Sumatoria externa:
Paso 1: i = 1
Paso 2: i = 3
Paso 3: i = 5
Paso k: i = 2k-1
Corta cuando
2k-1 >= n
k >= (n-1)/2

Sumatoria interna:
Paso 1: se ejecuta 1 vez
Paso 2: se ejecuta 2 veces.
Paso i: se ejecuta i veces.

      n/2  i      n/2           n/2
T(n) = Σ ( Σ c ) = Σ (i*c) = c * Σ i = c * ((n/2)*(n/2+1) / 2) =  
      i=1 j=1     i=1           i=1

T(n) = c * ((n^2/4 + n/2) / 2)